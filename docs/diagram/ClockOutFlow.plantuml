@startuml ClockOutFlow
title Clock Out Flow - Sequence Diagram

' Define actors and components
actor User
participant "SleepRecordController" as Controller
participant "SleepRecordUsecase::ClockOut" as Usecase
participant "SleepRecord Repository" as SleepRecordRepository
participant "Follow Repository" as FollowRepository
participant "SleepRecordFanoutJob" as Job
database "PostgreSQL" as DB

' Temporary auth via X-User-Id header (for fast development, to be replaced later)
group Temporary Authentication (Fast Dev Mode)
    User -> Controller: PUT /sleep_records/clock_out\nHeader: X-User-Id: <user_id>
    activate Controller

    note right of Controller
      X-User-Id is temporary. To be replaced by JWT auth later.
    end note

    Controller -> DB: SELECT * FROM users\nWHERE id = <user_id> LIMIT 1;
    activate DB
    DB --> Controller: Return <current_user> OR null [user object]
    deactivate DB

    alt User object is null
        Controller --> Controller: error: "<current_user> is null"
        Controller --> User: HTTP 404 Not Found\n"User not found"
    end
end group

Controller -> Usecase: clock_out(user: <current_user>, clock_out: Time.current)
activate Usecase

Usecase --> SleepRecordRepository: find_active_by_user(<user>.id)
activate SleepRecordRepository
SleepRecordRepository --> DB: SELECT * FROM sleep_records \nWHERE user_id = <user>.id AND clock_out IS NULL \nLIMIT 1
activate DB
DB --> SleepRecordRepository: Return <current_session> OR null [sleep_record object]
deactivate DB
SleepRecordRepository --> Usecase: Return <current_session> OR null [sleep_record object]
deactivate SleepRecordRepository

Usecase --> FollowRepository: list_follower_ids(user_id: <user>.id, limit: Repository::FANOUT_LIMIT + 1)
activate FollowRepository
FollowRepository --> DB: SELECT followee_id FROM follows \nWHERE user_id = <user>.id LIMIT <Repository::FANOUT_LIMIT + 1>
activate DB
DB --> FollowRepository: Return <follower_ids> [list<int>]
deactivate DB
FollowRepository --> Usecase: Return <follower_ids> [list<int>]
deactivate FollowRepository

alt Current Session doesn't Exist
    Usecase --> Usecase: error: <current_session> doesn't exist
    Usecase --> Controller: error: "No active sleep session found"
    Controller --> User: HTTP 400 Bad Request\n"No active sleep session found"
end

Usecase --> DB: UPDATE sleep_records\nSET clock_out = <clock_out>,\nsleep_time = <sleep_time>\nWHERE id = <current_session>.id
activate DB
note right of DB
  Before saving, model calculates:\n
  sleep_time = clock_out - clock_in
end note
DB --> Usecase: Return true OR false [boolean]
deactivate DB

alt True AND Count of followers <= Repository::FANOUT_LIMIT
    Usecase -> Job: perform_later(<current_session>.id, <follower_ids>)
end

Usecase --> Controller: Return success or failure
deactivate Usecase

alt Success
    Controller --> User: HTTP 200 OK\n"<current_session>"
else Failure
    Controller --> User: HTTP 500 Internal Server Error\n"Failed to clock out"
end
deactivate Controller

@enduml
