@startuml Following
title Follow User Flow - Sequence Diagram

' Define actors and components
actor User
participant "FollowsController" as Controller
participant "FollowUsecase::Follow" as Usecase
participant "User Repository" as UserRepository
participant "Follow Repository" as FollowRepository
database "PostgreSQL" as DB

' Temporary auth via X-User-Id header (for fast development, to be replaced later)
group Temporary auth via X-User-Id header (for fast development, to be replaced later)
    User -> Controller: POST /users/:id/following\nHeader: X-User-Id: <user_id>
    activate Controller

    note right of Controller
      X-User-Id is temporary. To be replaced by JWT auth later.
    end note

    Controller -> DB: SELECT * FROM users\nWHERE id = <user_id>
    activate DB
    DB --> Controller: Return user object / null
    deactivate DB

    alt User object is null
        Controller --> Controller: error: "user is null"
        Controller --> User: HTTP 404 Not Found\n"User not found"
    end
end group

' Check: Cannot follow yourself
alt User tries to follow themselves
    Controller --> Controller: error: "user.id == followee_id"
    Controller --> User: HTTP 400 Bad Request\n"Cannot follow yourself"
end

' Controller delegates to usecase with current user and followee_id
Controller -> Usecase: follow(user, followee_id)
activate Usecase

' Usecase queries followee existence
Usecase -> UserRepository: find_by_id(followee_id)
activate UserRepository
UserRepository -> DB: SELECT * FROM users\nWHERE id = <followee_id>
activate DB
DB --> UserRepository: Return followee object
deactivate DB
UserRepository --> Usecase: Return followee object
deactivate UserRepository

' Usecase checks if follow relation already exists
Usecase -> FollowRepository: exist?(follower: user, followee: followee)
activate FollowRepository
FollowRepository -> DB: SELECT 1 AS one FROM follows\nWHERE follower_id = <user_id>\nAND followee_id = <followee_id>\nLIMIT 1
activate DB
DB --> FollowRepository: true / false
deactivate DB
FollowRepository --> Usecase: existence boolean
deactivate FollowRepository

' If follow already exists, return error
alt Already Exists
    Usecase --> Usecase: error: "follow already exists"
    Usecase --> Controller: error: "Already following this user"
    Controller --> User: HTTP 400 Bad Request\n"Already following this user"
end

' Branch: create new follow record if not already exists
Usecase -> FollowRepository: create(follower: user, followee: followee)
activate FollowRepository
FollowRepository -> DB: INSERT INTO follows (follower_id, followee_id, created_at)\nVALUES (<user_id>, <followee_id>, CURRENT_TIMESTAMP)
activate DB
DB --> FollowRepository: created follow record
deactivate DB
FollowRepository --> Usecase: follow object
deactivate FollowRepository

' Usecase returns result to controller
Usecase --> Controller: Return success
deactivate Usecase

' Final HTTP response to user
Controller --> User: HTTP 200 OK\n"Follow created successfully"
deactivate Controller

@enduml
