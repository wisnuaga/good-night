@startuml FollowingUserFlow
title Following User Flow - Sequence Diagram

' Define actors and components
actor User
participant "FollowsController" as Controller
participant "FollowUsecase::Follow" as Usecase
participant "User Repository" as UserRepository
participant "Follow Repository" as FollowRepository
database "PostgreSQL" as DB

' Temporary auth via X-User-Id header (for fast development, to be replaced later)
group Temporary Authentication (Fast Dev Mode)
    User -> Controller: POST /users/:id/following\nHeader: X-User-Id: <user_id>
    activate Controller

    note right of Controller
      X-User-Id is temporary. To be replaced by JWT auth later.
    end note

    Controller -> DB: SELECT * FROM users\nWHERE id = <user_id> LIMIT 1;
    activate DB
    DB --> Controller: Return <current_user> OR null [user object]
    deactivate DB

    alt User object is null
        Controller --> Controller: error: "<current_user> is null"
        Controller --> User: HTTP 404 Not Found\n"User not found"
    end
end group

alt User tries to follow themselves
    Controller --> Controller: error: "<current_user> == followee_id"
    Controller --> User: HTTP 400 Bad Request\n"Cannot follow yourself"
end

Controller -> Usecase: follow(user, followee_id)
activate Usecase

Usecase -> UserRepository: find_by_id(followee_id)
activate UserRepository
UserRepository -> DB: SELECT * FROM users\nWHERE id = <followee_id>
activate DB
DB --> UserRepository: Return <followee> OR null [user object]
deactivate DB
UserRepository --> Usecase: Return <followee> OR null [user object]
deactivate UserRepository

Usecase -> FollowRepository: exist?(follower: <current_user>, followee: <followee>)
activate FollowRepository
FollowRepository -> DB: SELECT 1 AS one FROM follows\nWHERE follower_id = <current_user.id>\nAND followee_id = <followee.id>\nLIMIT 1
activate DB
DB --> FollowRepository: Return true OR false [boolean]
deactivate DB
FollowRepository --> Usecase: existence boolean
deactivate FollowRepository

alt Exists
    Usecase --> Usecase: error: "follow already exists"
    Usecase --> Controller: error: "Already following this user"
    Controller --> User: HTTP 400 Bad Request\n"Already following this user"
end

Usecase -> FollowRepository: create(follower: user, followee: followee)
activate FollowRepository
FollowRepository -> DB: INSERT INTO follows (follower_id, followee_id, created_at)\nVALUES (<user_id>, <followee_id>, CURRENT_TIMESTAMP)
activate DB
DB --> FollowRepository: Return created <follow> record [follow object]
deactivate DB
FollowRepository --> Usecase: Return created <follow> record [follow object]
deactivate FollowRepository
Usecase --> Controller: Return success or failure
deactivate Usecase

alt Success    
    Controller --> User: HTTP 200 OK\n"Follow created successfully"
else Fail
    Controller --> User: HTTP 500 Internal Server Error\n"Failed to create follow"
end
deactivate Controller

@enduml
